{"version":3,"file":"static/webpack/static\\development\\pages\\posts\\new.js.d6a1a32d4400b75c6dc5.hot-update.js","sources":["webpack:///./pages/posts/new.tsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NextPage } from 'next';\r\nimport { Dispatch } from 'redux';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostModel from '../../models/PostModel';\r\nimport StateModel from '../../models/StateModel';\r\n\r\nimport { sendPost } from '../../redux/actions/createPostActions';\r\n\r\ninterface State {\r\n  isSent: boolean;\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n}\r\n\r\ninterface Props extends State {\r\n  sendPost: (post: PostModel) => Promise<void>;\r\n}\r\n\r\nconst CreatePost: NextPage<Props> = ({ sendPost, isSent, isLoading, isError }) => {\r\n  const titleRef = useRef(null);\r\n  const contentRef = useRef(null);\r\n\r\n  return (\r\n    <AppLayout>\r\n      <Wrapper>\r\n        <StyledHeading>CreatePost</StyledHeading>\r\n        <Form\r\n          onSubmit={(e): void => {\r\n            e.preventDefault();\r\n            const title = titleRef.current.value;\r\n            const body = contentRef.current.value;\r\n            contentRef.current.value = '';\r\n            titleRef.current.value = '';\r\n            sendPost({ title, body });\r\n          }}\r\n        >\r\n          <StyledFormGroup>\r\n            <Form.Label htmlFor=\"title\">\r\n              Post title: <input type=\"text\" name=\"title\" ref={titleRef} />\r\n            </Form.Label>\r\n\r\n            <Form.Label htmlFor=\"body\">\r\n              Contents:\r\n              <Form.Control as=\"textarea\" name=\"body\" ref={contentRef} />\r\n            </Form.Label>\r\n            <Button type=\"submit\" disabled={isLoading}>\r\n              Post!\r\n            </Button>\r\n          </StyledFormGroup>\r\n        </Form>\r\n        {isSent && (\r\n          <StyledModal>\r\n            <Modal.Body>Your Post was created!</Modal.Body>\r\n          </StyledModal>\r\n        )}\r\n        {isError && <div>Something went wrong!</div>}\r\n      </Wrapper>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledHeading = styled.h2`\r\n  margin: 2rem;\r\n`;\r\n\r\nconst StyledFormGroup = styled(Form.Group)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst StyledModal = styled(Modal.Dialog)`\r\n  background-color: green;\r\n`;\r\n\r\nconst mapStateToProps = (state: StateModel): State => ({\r\n  isSent: state.createPost.isSent,\r\n  isLoading: state.createPost.isLoading,\r\n  isError: state.createPost.isError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): { sendPost: (post: PostModel) => Promise<void> } => ({\r\n  sendPost: sendPost(dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AACA;AAEA;AAIA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAMA;AAIA;AAKA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAKA;AAAA;AACA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}