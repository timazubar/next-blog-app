{"version":3,"file":"static/webpack/static\\development\\pages\\posts\\[id].js.a277a566e49227f4e244.hot-update.js","sources":["webpack:///./pages/posts/.tsx"],"sourcesContent":["import React from 'react';\r\nimport { NextPage } from 'next';\r\nimport Link from 'next/link';\r\nimport { connect } from 'react-redux';\r\nimport { Card, Modal } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport AppLayout from '../../components/AppLayout';\r\n\r\nimport PostModel from '../../models/PostModel';\r\nimport StateModel from '../../models/StateModel';\r\n\r\nimport { fetchPostByID } from '../../redux/actions/postActions';\r\n\r\ninterface Props {\r\n  post?: PostModel;\r\n  isError?: boolean;\r\n}\r\n\r\nconst Post: NextPage<Props> = ({ post, isError }) => {\r\n  return (\r\n    <AppLayout>\r\n      {isError ? (\r\n        <Modal.Dialog>\r\n          <ErrorModal>Error!</ErrorModal>\r\n        </Modal.Dialog>\r\n      ) : (\r\n        <Wrapper>\r\n          <StyledCard>\r\n            <Card.Body>\r\n              <Link href=\"/\">\r\n                <a>Go back to posts list</a>\r\n              </Link>\r\n              <StyledTitle>{post.title}</StyledTitle>\r\n              <StyledText>{post.body}</StyledText>\r\n              <StyledId>id: {post.id}</StyledId>\r\n            </Card.Body>\r\n          </StyledCard>\r\n        </Wrapper>\r\n      )}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nconst ErrorModal = styled(Modal.Body)`\r\n  font-size: 1.5em;\r\n  font-weight: 500;\r\n  background-color: maroon;\r\n  color: white;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledCard = styled(Card)`\r\n  margin: 1rem 0;\r\n`;\r\n\r\nconst StyledTitle = styled(Card.Title)`\r\n  font-size: 2rem;\r\n`;\r\n\r\nconst StyledId = styled(Card.Subtitle)`\r\n  font-size: 0.8em;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst StyledText = styled(Card.Text)`\r\n  font-size: 1.5em;\r\n`;\r\n\r\nPost.getInitialProps = async ({ query, store }): Promise<{ post: PostModel }> => {\r\n  const { dispatch } = store;\r\n  await fetchPostByID(query.id, dispatch);\r\n  const { post } = store.getState().post;\r\n\r\n  return { post };\r\n};\r\n\r\nconst mapStateToProps = (state: StateModel): { isError: boolean } => ({\r\n  isError: state.post.isError,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Post);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAMA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AAOA;AAMA;AAIA;AAIA;AAKA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AAHA;AAKA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AACA;AADA;AAAA;AACA;AAGA;;;;A","sourceRoot":""}