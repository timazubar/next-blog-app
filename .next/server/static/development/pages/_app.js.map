{"version":3,"file":"static\\development\\pages\\_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/_app.tsx","webpack:///./redux/actions/createPostActions.ts","webpack:///./redux/actions/postActions.ts","webpack:///./redux/actions/postsListActions.ts","webpack:///./redux/reducers/createPostReducer.ts","webpack:///./redux/reducers/postReducer.ts","webpack:///./redux/reducers/postsListReducer.ts","webpack:///./redux/reducers/rootReducer.ts","webpack:///./redux/store.ts","webpack:///./services/BlogService.ts","webpack:///external \"axios\"","webpack:///external \"next-redux-wrapper\"","webpack:///external \"react\"","webpack:///external \"react-redux\"","webpack:///external \"redux\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport withRedux from 'next-redux-wrapper';\r\n\r\nimport store from '../redux/store';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst MyApp = (props: { Component: any; pageProps: any; store: any }) => {\r\n  const { Component, pageProps, store } = props;\r\n  return (\r\n    <Provider store={store}>\r\n      <Component {...pageProps} />\r\n    </Provider>\r\n  );\r\n};\r\n\r\nMyApp.getInitialProps = async ({ Component, ctx }) => {\r\n  return {\r\n    pageProps: {\r\n      ...(Component.getInitialProps ? await Component.getInitialProps(ctx) : {}),\r\n    },\r\n  };\r\n};\r\n\r\nconst makeStore = () => store;\r\n\r\nexport default withRedux(makeStore)(MyApp);\r\n","import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  SEND_POST_REQUEST = 'SEND_POST_REQUEST',\r\n  SEND_POST_SUCCESS = 'SEND_POST_SUCCESS',\r\n  SEND_POST_FAILURE = 'SEND_POST_FAILURE',\r\n\r\n  TOGGLE_SENT_STATUS = 'TOGGLE_SENT_STATUS',\r\n}\r\n\r\nconst postSendRequested = (): AnyAction => ({\r\n  type: actionTypes.SEND_POST_REQUEST,\r\n});\r\n\r\nconst postSendError = (error: Error): AnyAction => ({\r\n  type: actionTypes.SEND_POST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postSendSuccess = (): AnyAction => ({\r\n  type: actionTypes.SEND_POST_SUCCESS,\r\n});\r\n\r\nconst toggleSentStatus = (): AnyAction => ({\r\n  type: actionTypes.TOGGLE_SENT_STATUS,\r\n});\r\n\r\nconst sendPost = (dispatch: Dispatch) => async (post: PostModel): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postSendRequested());\r\n    blogService.sendPost(post);\r\n    dispatch(postSendSuccess());\r\n    dispatch(toggleSentStatus());\r\n    setTimeout(() => {\r\n      dispatch(toggleSentStatus());\r\n    }, 800);\r\n  } catch (err) {\r\n    dispatch(postSendError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, sendPost };\r\n","import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POST_REQUEST = 'FETCH_POST_REQUEST',\r\n  FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS',\r\n  FETCH_POST_FAILURE = 'FETCH_POST_FAILURE',\r\n}\r\n\r\nconst postRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_REQUEST,\r\n});\r\n\r\nconst postError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postLoaded = (post: PostModel): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_SUCCESS,\r\n  payload: post,\r\n});\r\n\r\nconst fetchPostByID = async (postId, dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postRequested());\r\n    const post = await blogService.getPostById(postId);\r\n    dispatch(postLoaded(post));\r\n  } catch (err) {\r\n    dispatch(postError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPostByID };\r\n","import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POSTS_LIST_REQUEST = 'FETCH_AUTHORS_LIST_REQUEST',\r\n  FETCH_POSTS_LIST_SUCCESS = 'FETCH_AUTHORS_LIST_SUCCESS',\r\n  FETCH_POSTS_LIST_FAILURE = 'FETCH_AUTHORS_LIST_FAILURE',\r\n}\r\n\r\nconst postsRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_REQUEST,\r\n});\r\n\r\nconst postsError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postsLoaded = (postsList: PostModel[]): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\r\n  payload: postsList,\r\n});\r\n\r\nconst fetchPosts = async (dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postsRequested());\r\n    const postsList = await (await blogService.getPosts()).reverse();\r\n    dispatch(postsLoaded(postsList));\r\n  } catch (err) {\r\n    dispatch(postsError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPosts };\r\n","import { actionTypes } from '../actions/createPostActions';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  isError: false,\r\n  isSent: false,\r\n};\r\n\r\ntype createPostState = typeof initialState;\r\n\r\nconst createPostReducer = (state = initialState, action: AnyAction): createPostState => {\r\n  switch (action.type) {\r\n    case actionTypes.SEND_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case actionTypes.SEND_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n      };\r\n    case actionTypes.SEND_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    case actionTypes.TOGGLE_SENT_STATUS:\r\n      return {\r\n        ...state,\r\n        isSent: !state.isSent,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default createPostReducer;\r\n","import { actionTypes } from '../actions/postActions';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst initialState = {\r\n  post: null,\r\n  isLoading: true,\r\n  isError: false,\r\n};\r\n\r\ntype PostState = typeof initialState;\r\n\r\nconst postReducer = (state = initialState, action: AnyAction): PostState => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case actionTypes.FETCH_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        post: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case actionTypes.FETCH_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import { actionTypes } from '../actions/postsListActions';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst initialState = {\r\n  postsList: [],\r\n  isLoading: true,\r\n  isError: false,\r\n};\r\n\r\ntype PostsListState = typeof initialState;\r\n\r\nconst postsListReducer = (state = initialState, action: AnyAction): PostsListState => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POSTS_LIST_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case actionTypes.FETCH_POSTS_LIST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        postsList: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case actionTypes.FETCH_POSTS_LIST_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default postsListReducer;\r\n","import { combineReducers } from 'redux';\r\nimport postsListReducer from './postsListReducer';\r\nimport postReducer from './postReducer';\r\nimport createPostReducer from './createPostReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  postsList: postsListReducer,\r\n  post: postReducer,\r\n  createPost: createPostReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\n\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport PostModel from '../models/PostModel';\r\n\r\nexport default class PostsService {\r\n  private apiBase = 'https://simple-blog-api.crew.red';\r\n\r\n  async getPosts(): Promise<PostModel[]> {\r\n    const { data } = await axios.get(`${this.apiBase}/posts`);\r\n    return data;\r\n  }\r\n\r\n  async getPostById(id: string): Promise<PostModel> {\r\n    const { data } = await axios.get(`${this.apiBase}/posts/${id}`);\r\n    return data;\r\n  }\r\n\r\n  sendPost(post: PostModel): void {\r\n    axios.post(`${this.apiBase}/posts`, post);\r\n  }\r\n}\r\n","module.exports = require(\"axios\");","module.exports = require(\"next-redux-wrapper\");","module.exports = require(\"react\");","module.exports = require(\"react-redux\");","module.exports = require(\"redux\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAKA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AADA;AACA;AAGA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AADA;AACA;AAGA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AClCA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AAxBA;AA0BA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACxCA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AApBA;AAsBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACpCA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AApBA;AAsBA;AACA;AACA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAMA;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;;;;;;;;;;;;;;;;;;ACNA;AAGA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;;;;;;;;;;;;;;;;;;;;;;;ACHA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}