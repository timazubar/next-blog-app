{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\TIMA\\\\Projects\\\\DevelopsToday\\\\next-blog-app\\\\pages\\\\index.tsx\";\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostsList from '../components/PostsList';\nimport { fetchPosts } from '../redux/actions/postsListActions';\n\nvar Index = function Index(_ref) {\n  var postsList = _ref.postsList,\n      isError = _ref.isError;\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(PostsList, {\n    posts: postsList,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n};\n\n_c = Index;\n\nIndex.getInitialProps = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n    var store, dispatch, postsList;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            store = _ref2.store;\n            dispatch = store.dispatch;\n            _context.next = 4;\n            return fetchPosts(dispatch);\n\n          case 4:\n            postsList = store.getState().postsList.postsList;\n            return _context.abrupt(\"return\", {\n              postsList: postsList\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isError: state.postsList.isError\n  };\n};\n\nexport default connect(mapStateToProps)(Index);\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/pages/index.tsx"],"names":["React","connect","AppLayout","PostsList","fetchPosts","Index","postsList","isError","getInitialProps","store","dispatch","getState","mapStateToProps","state"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAIA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,UAAT,QAA2B,mCAA3B;;AAOA,IAAMC,KAAsB,GAAG,SAAzBA,KAAyB,OAA4B;AAAA,MAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,MAAdC,OAAc,QAAdA,OAAc;AACzD,SACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAED,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;KAAMD,K;;AAQNA,KAAK,CAACG,eAAN;AAAA,uEAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,YAAAA,KADsB,SACtBA,KADsB;AAGdC,YAAAA,QAHc,GAGDD,KAHC,CAGdC,QAHc;AAAA;AAAA,mBAIhBN,UAAU,CAACM,QAAD,CAJM;;AAAA;AAKdJ,YAAAA,SALc,GAKAG,KAAK,CAACE,QAAN,GAAiBL,SALjB,CAKdA,SALc;AAAA,6CAMf;AAAEA,cAAAA,SAAS,EAATA;AAAF,aANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AASA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SAAkC;AACxDN,IAAAA,OAAO,EAAEM,KAAK,CAACP,SAAN,CAAgBC;AAD+B,GAAlC;AAAA,CAAxB;;AAIA,eAAeN,OAAO,CAACW,eAAD,CAAP,CAAyBP,KAAzB,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NextPage, NextPageContext } from 'next';\r\n\r\nimport PostModel from '../models/PostModel';\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostsList from '../components/PostsList';\r\nimport { fetchPosts } from '../redux/actions/postsListActions';\r\n\r\ninterface Props {\r\n  postsList: PostModel[];\r\n  isError?: boolean;\r\n}\r\n\r\nconst Index: NextPage<Props> = ({ postsList, isError }) => {\r\n  return (\r\n    <AppLayout>\r\n      <PostsList posts={postsList} />\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nIndex.getInitialProps = async ({\r\n  store,\r\n}: NextPageContext): Promise<{ postsList: PostModel[] }> => {\r\n  const { dispatch } = store;\r\n  await fetchPosts(dispatch);\r\n  const { postsList } = store.getState().postsList;\r\n  return { postsList };\r\n};\r\n\r\nconst mapStateToProps = (state): { isError: boolean } => ({\r\n  isError: state.postsList.isError,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Index);\r\n"]},"metadata":{},"sourceType":"module"}