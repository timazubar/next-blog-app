{"ast":null,"code":"var _jsxFileName = \"E:\\\\TIMA\\\\Projects\\\\DevelopsToday\\\\next-blog-app\\\\pages\\\\posts\\\\new.tsx\";\nvar __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport AppLayout from '../../components/AppLayout';\nimport { sendPost } from '../../redux/actions/createPostActions';\n\nconst CreatePost = ({\n  sendPost,\n  isSent,\n  isLoading,\n  isError\n}) => {\n  const titleRef = useRef(null);\n  const contentRef = useRef(null);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(StyledHeading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, \"CreatePost\"), __jsx(Form, {\n    onSubmit: e => {\n      e.preventDefault();\n      const title = titleRef.current.value;\n      const body = contentRef.current.value;\n      contentRef.current.value = '';\n      titleRef.current.value = '';\n      sendPost({\n        title,\n        body\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, __jsx(StyledFormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, __jsx(Form.Label, {\n    htmlFor: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, \"Post title: \", __jsx(\"input\", {\n    type: \"text\",\n    name: \"title\",\n    ref: titleRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 27\n    }\n  })), __jsx(Form.Label, {\n    htmlFor: \"body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Contents:\", __jsx(Form.Control, {\n    as: \"textarea\",\n    name: \"body\",\n    ref: contentRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    type: \"submit\",\n    disabled: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Post!\"))), isSent && __jsx(Modal.Dialog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(StyledModalBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, \"Your Post was created!\")), isError && __jsx(Modal.Dialog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(ErrorModal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"Error!\"))));\n};\n\nconst StyledModalBody = styled(Modal.Body)`\n  font-size: 1.5em;\n  font-weight: 500;\n  background-color: green;\n  color: white;\n`;\nconst ErrorModal = styled(Modal.Body)`\n  font-size: 1.5em;\n  font-weight: 500;\n  background-color: maroon;\n  color: white;\n`;\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst StyledHeading = styled.h2`\n  margin: 2rem;\n`;\nconst StyledFormGroup = styled(Form.Group)`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst mapStateToProps = state => ({\n  isSent: state.createPost.isSent,\n  isLoading: state.createPost.isLoading,\n  isError: state.createPost.isError\n});\n\nconst mapDispatchToProps = dispatch => ({\n  sendPost: sendPost(dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/pages/posts/new.tsx"],"names":["React","useRef","connect","Button","Form","Modal","styled","AppLayout","sendPost","CreatePost","isSent","isLoading","isError","titleRef","contentRef","e","preventDefault","title","current","value","body","StyledModalBody","Body","ErrorModal","Wrapper","div","StyledHeading","h2","StyledFormGroup","Group","mapStateToProps","state","createPost","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { NextPage } from 'next';\r\nimport { Dispatch } from 'redux';\r\nimport { Button, Form, Modal } from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nimport AppLayout from '../../components/AppLayout';\r\nimport PostModel from '../../models/PostModel';\r\nimport StateModel from '../../models/StateModel';\r\n\r\nimport { sendPost } from '../../redux/actions/createPostActions';\r\n\r\ninterface State {\r\n  isSent: boolean;\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n}\r\n\r\ninterface Props extends State {\r\n  sendPost: (post: PostModel) => Promise<void>;\r\n}\r\n\r\nconst CreatePost: NextPage<Props> = ({ sendPost, isSent, isLoading, isError }) => {\r\n  const titleRef = useRef(null);\r\n  const contentRef = useRef(null);\r\n\r\n  return (\r\n    <AppLayout>\r\n      <Wrapper>\r\n        <StyledHeading>CreatePost</StyledHeading>\r\n        <Form\r\n          onSubmit={(e): void => {\r\n            e.preventDefault();\r\n            const title = titleRef.current.value;\r\n            const body = contentRef.current.value;\r\n            contentRef.current.value = '';\r\n            titleRef.current.value = '';\r\n            sendPost({ title, body });\r\n          }}\r\n        >\r\n          <StyledFormGroup>\r\n            <Form.Label htmlFor=\"title\">\r\n              Post title: <input type=\"text\" name=\"title\" ref={titleRef} />\r\n            </Form.Label>\r\n\r\n            <Form.Label htmlFor=\"body\">\r\n              Contents:\r\n              <Form.Control as=\"textarea\" name=\"body\" ref={contentRef} />\r\n            </Form.Label>\r\n            <Button type=\"submit\" disabled={isLoading}>\r\n              Post!\r\n            </Button>\r\n          </StyledFormGroup>\r\n        </Form>\r\n        {isSent && (\r\n          <Modal.Dialog>\r\n            <StyledModalBody>Your Post was created!</StyledModalBody>\r\n          </Modal.Dialog>\r\n        )}\r\n        {isError && (\r\n          <Modal.Dialog>\r\n            <ErrorModal>Error!</ErrorModal>\r\n          </Modal.Dialog>\r\n        )}\r\n      </Wrapper>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nconst StyledModalBody = styled(Modal.Body)`\r\n  font-size: 1.5em;\r\n  font-weight: 500;\r\n  background-color: green;\r\n  color: white;\r\n`;\r\n\r\nconst ErrorModal = styled(Modal.Body)`\r\n  font-size: 1.5em;\r\n  font-weight: 500;\r\n  background-color: maroon;\r\n  color: white;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst StyledHeading = styled.h2`\r\n  margin: 2rem;\r\n`;\r\n\r\nconst StyledFormGroup = styled(Form.Group)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst mapStateToProps = (state: StateModel): State => ({\r\n  isSent: state.createPost.isSent,\r\n  isLoading: state.createPost.isLoading,\r\n  isError: state.createPost.isError,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch): { sendPost: (post: PostModel) => Promise<void> } => ({\r\n  sendPost: sendPost(dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\r\n"]},"metadata":{},"sourceType":"module"}