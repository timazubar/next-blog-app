{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { actionTypes } from '../actions/postActions';\nconst initialState = {\n  post: null,\n  isLoading: true,\n  isError: false\n};\n\nconst postReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_POST_REQUEST:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        isError: false\n      });\n\n    case actionTypes.FETCH_POST_SUCCESS:\n      return _objectSpread({}, state, {\n        post: action.payload,\n        isLoading: false\n      });\n\n    case actionTypes.FETCH_POST_FAILURE:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        isError: true\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["C:/Users/Tima/Desktop/wl-blog/next-simple-blog/redux/reducers/postReducer.ts"],"names":["actionTypes","initialState","post","isLoading","isError","postReducer","state","action","type","FETCH_POST_REQUEST","FETCH_POST_SUCCESS","payload","FETCH_POST_FAILURE"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,wBAA5B;AAGA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,IADa;AAEnBC,EAAAA,SAAS,EAAE,IAFQ;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAwD;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,WAAW,CAACS,kBAAjB;AACE,+BACKH,KADL;AAEEH,QAAAA,SAAS,EAAE,IAFb;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKJ,WAAW,CAACU,kBAAjB;AACE,+BACKJ,KADL;AAEEJ,QAAAA,IAAI,EAAEK,MAAM,CAACI,OAFf;AAGER,QAAAA,SAAS,EAAE;AAHb;;AAKF,SAAKH,WAAW,CAACY,kBAAjB;AACE,+BACKN,KADL;AAEEH,QAAAA,SAAS,EAAE,KAFb;AAGEC,QAAAA,OAAO,EAAE;AAHX;;AAKF;AACE,+BAAYE,KAAZ;AApBJ;AAsBD,CAvBD;;AAyBA,eAAeD,WAAf","sourcesContent":["import { actionTypes } from '../actions/postActions';\r\nimport { AnyAction } from 'redux';\r\n\r\nconst initialState = {\r\n  post: null,\r\n  isLoading: true,\r\n  isError: false,\r\n};\r\n\r\ntype PostState = typeof initialState;\r\n\r\nconst postReducer = (state = initialState, action: AnyAction): PostState => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n      };\r\n    case actionTypes.FETCH_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        post: action.payload,\r\n        isLoading: false,\r\n      };\r\n    case actionTypes.FETCH_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n"]},"metadata":{},"sourceType":"module"}