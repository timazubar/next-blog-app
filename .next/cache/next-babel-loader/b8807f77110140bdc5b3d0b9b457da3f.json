{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BlogService from '../../services/BlogService';\nexport var FETCH_POSTS_LIST_REQUEST = 'FETCH_POSTS_LIST_REQUEST';\nexport var FETCH_POSTS_LIST_SUCCESS = 'FETCH_POSTS_LIST_SUCCESS';\nexport var FETCH_POSTS_LIST_FAILURE = 'FETCH_POSTS_LIST_FAILURE';\n\nvar postsRequested = function postsRequested() {\n  return {\n    type: FETCH_POSTS_LIST_REQUEST\n  };\n};\n\nvar postsLoaded = function postsLoaded(postsList) {\n  return {\n    type: FETCH_POSTS_LIST_SUCCESS,\n    payload: postsList\n  };\n};\n\nvar postsError = function postsError(error) {\n  return {\n    type: FETCH_POSTS_LIST_FAILURE,\n    payload: error\n  };\n};\n\nvar fetchPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var blogService, postsList;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            blogService = new BlogService();\n            _context.prev = 1;\n            dispatch(postsRequested());\n            _context.next = 5;\n            return blogService.getPosts();\n\n          case 5:\n            postsList = _context.sent.reverse();\n            dispatch(postsLoaded(postsList));\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(postsError(_context.t0));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function fetchPosts(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { fetchPosts };","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/redux/actions/postsListActions.ts"],"names":["BlogService","FETCH_POSTS_LIST_REQUEST","FETCH_POSTS_LIST_SUCCESS","FETCH_POSTS_LIST_FAILURE","postsRequested","type","postsLoaded","postsList","payload","postsError","error","fetchPosts","dispatch","blogService","getPosts","reverse"],"mappings":";;AAGA,OAAOA,WAAP,MAAwB,4BAAxB;AAEA,OAAO,IAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,IAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,IAAMC,wBAAwB,GAAG,0BAAjC;;AAEP,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAkB;AACvCC,IAAAA,IAAI,EAAEJ;AADiC,GAAlB;AAAA,CAAvB;;AAIA,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD;AAAA,SAAwC;AAC1DF,IAAAA,IAAI,EAAEH,wBADoD;AAE1DM,IAAAA,OAAO,EAAED;AAFiD,GAAxC;AAAA,CAApB;;AAKA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAA8B;AAC/CL,IAAAA,IAAI,EAAEF,wBADyC;AAE/CK,IAAAA,OAAO,EAAEE;AAFsC,GAA9B;AAAA,CAAnB;;AAKA,IAAMC,UAAU;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,WADW,GACG,IAAIb,WAAJ,EADH;AAAA;AAGfY,YAAAA,QAAQ,CAACR,cAAc,EAAf,CAAR;AAHe;AAAA,mBAIUS,WAAW,CAACC,QAAZ,EAJV;;AAAA;AAITP,YAAAA,SAJS,iBAIkCQ,OAJlC;AAKfH,YAAAA,QAAQ,CAACN,WAAW,CAACC,SAAD,CAAZ,CAAR;AALe;AAAA;;AAAA;AAAA;AAAA;AAOfK,YAAAA,QAAQ,CAACH,UAAU,aAAX,CAAR;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVE,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAWA,SAASA,UAAT","sourcesContent":["import { AnyAction, Dispatch } from 'redux';\r\n\r\nimport PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\n\r\nexport const FETCH_POSTS_LIST_REQUEST = 'FETCH_POSTS_LIST_REQUEST';\r\nexport const FETCH_POSTS_LIST_SUCCESS = 'FETCH_POSTS_LIST_SUCCESS';\r\nexport const FETCH_POSTS_LIST_FAILURE = 'FETCH_POSTS_LIST_FAILURE';\r\n\r\nconst postsRequested = (): AnyAction => ({\r\n  type: FETCH_POSTS_LIST_REQUEST,\r\n});\r\n\r\nconst postsLoaded = (postsList: PostModel[]): AnyAction => ({\r\n  type: FETCH_POSTS_LIST_SUCCESS,\r\n  payload: postsList,\r\n});\r\n\r\nconst postsError = (error: Error): AnyAction => ({\r\n  type: FETCH_POSTS_LIST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst fetchPosts = async (dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postsRequested());\r\n    const postsList = (await blogService.getPosts()).reverse();\r\n    dispatch(postsLoaded(postsList));\r\n  } catch (error) {\r\n    dispatch(postsError(error));\r\n  }\r\n};\r\n\r\nexport { fetchPosts };\r\n"]},"metadata":{},"sourceType":"module"}