{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BlogService from '../../services/BlogService';\nvar actionTypes;\n\n(function (actionTypes) {\n  actionTypes[\"FETCH_POSTS_LIST_REQUEST\"] = \"FETCH_AUTHORS_LIST_REQUEST\";\n  actionTypes[\"FETCH_POSTS_LIST_SUCCESS\"] = \"FETCH_AUTHORS_LIST_SUCCESS\";\n  actionTypes[\"FETCH_POSTS_LIST_FAILURE\"] = \"FETCH_AUTHORS_LIST_FAILURE\";\n})(actionTypes || (actionTypes = {}));\n\nvar postsRequested = function postsRequested() {\n  return {\n    type: actionTypes.FETCH_POSTS_LIST_REQUEST\n  };\n};\n\nvar postsError = function postsError(error) {\n  return {\n    type: actionTypes.FETCH_POSTS_LIST_FAILURE,\n    payload: error\n  };\n};\n\nvar postsLoaded = function postsLoaded(postsList) {\n  return {\n    type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\n    payload: postsList\n  };\n};\n\nvar fetchPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n    var blogService, postsList;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            blogService = new BlogService();\n            _context.prev = 1;\n            dispatch(postsRequested());\n            _context.next = 5;\n            return blogService.getPosts();\n\n          case 5:\n            _context.next = 7;\n            return _context.sent.reverse();\n\n          case 7:\n            postsList = _context.sent;\n            dispatch(postsLoaded(postsList));\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(postsError(_context.t0));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n\n  return function fetchPosts(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { actionTypes, fetchPosts };","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/redux/actions/postsListActions.ts"],"names":["BlogService","actionTypes","postsRequested","type","FETCH_POSTS_LIST_REQUEST","postsError","error","FETCH_POSTS_LIST_FAILURE","payload","postsLoaded","postsList","FETCH_POSTS_LIST_SUCCESS","fetchPosts","dispatch","blogService","getPosts","reverse"],"mappings":";;AACA,OAAOA,WAAP,MAAwB,4BAAxB;IAGKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAML,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAkB;AACvCC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADqB,GAAlB;AAAA,CAAvB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAA8B;AAC/CH,IAAAA,IAAI,EAAEF,WAAW,CAACM,wBAD6B;AAE/CC,IAAAA,OAAO,EAAEF;AAFsC,GAA9B;AAAA,CAAnB;;AAKA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD;AAAA,SAAwC;AAC1DP,IAAAA,IAAI,EAAEF,WAAW,CAACU,wBADwC;AAE1DH,IAAAA,OAAO,EAAEE;AAFiD,GAAxC;AAAA,CAApB;;AAKA,IAAME,UAAU;AAAA,sEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,WADW,GACG,IAAId,WAAJ,EADH;AAAA;AAGfa,YAAAA,QAAQ,CAACX,cAAc,EAAf,CAAR;AAHe;AAAA,mBAIgBY,WAAW,CAACC,QAAZ,EAJhB;;AAAA;AAAA;AAAA,iCAIwCC,OAJxC;;AAAA;AAITN,YAAAA,SAJS;AAKfG,YAAAA,QAAQ,CAACJ,WAAW,CAACC,SAAD,CAAZ,CAAR;AALe;AAAA;;AAAA;AAAA;AAAA;AAOfG,YAAAA,QAAQ,CAACR,UAAU,aAAX,CAAR;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVO,UAAU;AAAA;AAAA;AAAA,GAAhB;;AAWA,SAASX,WAAT,EAAsBW,UAAtB","sourcesContent":["import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POSTS_LIST_REQUEST = 'FETCH_AUTHORS_LIST_REQUEST',\r\n  FETCH_POSTS_LIST_SUCCESS = 'FETCH_AUTHORS_LIST_SUCCESS',\r\n  FETCH_POSTS_LIST_FAILURE = 'FETCH_AUTHORS_LIST_FAILURE',\r\n}\r\n\r\nconst postsRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_REQUEST,\r\n});\r\n\r\nconst postsError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postsLoaded = (postsList: PostModel[]): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\r\n  payload: postsList,\r\n});\r\n\r\nconst fetchPosts = async (dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postsRequested());\r\n    const postsList = await (await blogService.getPosts()).reverse();\r\n    dispatch(postsLoaded(postsList));\r\n  } catch (err) {\r\n    dispatch(postsError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPosts };\r\n"]},"metadata":{},"sourceType":"module"}