{"ast":null,"code":"import BlogService from '../../services/BlogService';\nvar actionTypes;\n\n(function (actionTypes) {\n  actionTypes[\"FETCH_POSTS_LIST_REQUEST\"] = \"FETCH_AUTHORS_LIST_REQUEST\";\n  actionTypes[\"FETCH_POSTS_LIST_SUCCESS\"] = \"FETCH_AUTHORS_LIST_SUCCESS\";\n  actionTypes[\"FETCH_POSTS_LIST_FAILURE\"] = \"FETCH_AUTHORS_LIST_FAILURE\";\n})(actionTypes || (actionTypes = {}));\n\nconst postsRequested = () => ({\n  type: actionTypes.FETCH_POSTS_LIST_REQUEST\n});\n\nconst postsError = error => ({\n  type: actionTypes.FETCH_POSTS_LIST_FAILURE,\n  payload: error\n});\n\nconst postsLoaded = postsList => ({\n  type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\n  payload: postsList\n});\n\nconst fetchPosts = async dispatch => {\n  const blogService = new BlogService();\n\n  try {\n    dispatch(postsRequested());\n    const postsList = await (await blogService.getPosts()).reverse();\n    dispatch(postsLoaded(postsList));\n  } catch (err) {\n    dispatch(postsError(err));\n  }\n};\n\nexport { actionTypes, fetchPosts };","map":{"version":3,"sources":["C:/Users/Tima/Desktop/wl-blog/next-simple-blog/redux/actions/postsListActions.ts"],"names":["BlogService","actionTypes","postsRequested","type","FETCH_POSTS_LIST_REQUEST","postsError","error","FETCH_POSTS_LIST_FAILURE","payload","postsLoaded","postsList","FETCH_POSTS_LIST_SUCCESS","fetchPosts","dispatch","blogService","getPosts","reverse","err"],"mappings":"AACA,OAAOA,WAAP,MAAwB,4BAAxB;IAGKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAML,MAAMC,cAAc,GAAG,OAAkB;AACvCC,EAAAA,IAAI,EAAEF,WAAW,CAACG;AADqB,CAAlB,CAAvB;;AAIA,MAAMC,UAAU,GAAIC,KAAD,KAA8B;AAC/CH,EAAAA,IAAI,EAAEF,WAAW,CAACM,wBAD6B;AAE/CC,EAAAA,OAAO,EAAEF;AAFsC,CAA9B,CAAnB;;AAKA,MAAMG,WAAW,GAAIC,SAAD,KAAwC;AAC1DP,EAAAA,IAAI,EAAEF,WAAW,CAACU,wBADwC;AAE1DH,EAAAA,OAAO,EAAEE;AAFiD,CAAxC,CAApB;;AAKA,MAAME,UAAU,GAAG,MAAOC,QAAP,IAA6C;AAC9D,QAAMC,WAAW,GAAG,IAAId,WAAJ,EAApB;;AACA,MAAI;AACFa,IAAAA,QAAQ,CAACX,cAAc,EAAf,CAAR;AACA,UAAMQ,SAAS,GAAG,MAAM,CAAC,MAAMI,WAAW,CAACC,QAAZ,EAAP,EAA+BC,OAA/B,EAAxB;AACAH,IAAAA,QAAQ,CAACJ,WAAW,CAACC,SAAD,CAAZ,CAAR;AACD,GAJD,CAIE,OAAOO,GAAP,EAAY;AACZJ,IAAAA,QAAQ,CAACR,UAAU,CAACY,GAAD,CAAX,CAAR;AACD;AACF,CATD;;AAWA,SAAShB,WAAT,EAAsBW,UAAtB","sourcesContent":["import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POSTS_LIST_REQUEST = 'FETCH_AUTHORS_LIST_REQUEST',\r\n  FETCH_POSTS_LIST_SUCCESS = 'FETCH_AUTHORS_LIST_SUCCESS',\r\n  FETCH_POSTS_LIST_FAILURE = 'FETCH_AUTHORS_LIST_FAILURE',\r\n}\r\n\r\nconst postsRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_REQUEST,\r\n});\r\n\r\nconst postsError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postsLoaded = (postsList: PostModel[]): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\r\n  payload: postsList,\r\n});\r\n\r\nconst fetchPosts = async (dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postsRequested());\r\n    const postsList = await (await blogService.getPosts()).reverse();\r\n    dispatch(postsLoaded(postsList));\r\n  } catch (err) {\r\n    dispatch(postsError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPosts };\r\n"]},"metadata":{},"sourceType":"module"}