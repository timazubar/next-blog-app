{"ast":null,"code":"import BlogService from '../../services/BlogService';\nexport const FETCH_POSTS_LIST_REQUEST = 'FETCH_POSTS_LIST_REQUEST';\nexport const FETCH_POSTS_LIST_SUCCESS = 'FETCH_POSTS_LIST_SUCCESS';\nexport const FETCH_POSTS_LIST_FAILURE = 'FETCH_POSTS_LIST_FAILURE';\n\nconst postsRequested = () => ({\n  type: FETCH_POSTS_LIST_REQUEST\n});\n\nconst postsLoaded = postsList => ({\n  type: FETCH_POSTS_LIST_SUCCESS,\n  payload: postsList\n});\n\nconst postsError = error => ({\n  type: FETCH_POSTS_LIST_FAILURE,\n  payload: error\n});\n\nconst fetchPosts = async dispatch => {\n  const blogService = new BlogService();\n\n  try {\n    dispatch(postsRequested());\n    const postsList = (await blogService.getPosts()).reverse();\n    dispatch(postsLoaded(postsList));\n  } catch (error) {\n    dispatch(postsError(error));\n  }\n};\n\nexport { fetchPosts };","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/redux/actions/postsListActions.ts"],"names":["BlogService","FETCH_POSTS_LIST_REQUEST","FETCH_POSTS_LIST_SUCCESS","FETCH_POSTS_LIST_FAILURE","postsRequested","type","postsLoaded","postsList","payload","postsError","error","fetchPosts","dispatch","blogService","getPosts","reverse"],"mappings":"AAGA,OAAOA,WAAP,MAAwB,4BAAxB;AAEA,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAG,0BAAjC;;AAEP,MAAMC,cAAc,GAAG,OAAkB;AACvCC,EAAAA,IAAI,EAAEJ;AADiC,CAAlB,CAAvB;;AAIA,MAAMK,WAAW,GAAIC,SAAD,KAAwC;AAC1DF,EAAAA,IAAI,EAAEH,wBADoD;AAE1DM,EAAAA,OAAO,EAAED;AAFiD,CAAxC,CAApB;;AAKA,MAAME,UAAU,GAAIC,KAAD,KAA8B;AAC/CL,EAAAA,IAAI,EAAEF,wBADyC;AAE/CK,EAAAA,OAAO,EAAEE;AAFsC,CAA9B,CAAnB;;AAKA,MAAMC,UAAU,GAAG,MAAOC,QAAP,IAA6C;AAC9D,QAAMC,WAAW,GAAG,IAAIb,WAAJ,EAApB;;AACA,MAAI;AACFY,IAAAA,QAAQ,CAACR,cAAc,EAAf,CAAR;AACA,UAAMG,SAAS,GAAG,CAAC,MAAMM,WAAW,CAACC,QAAZ,EAAP,EAA+BC,OAA/B,EAAlB;AACAH,IAAAA,QAAQ,CAACN,WAAW,CAACC,SAAD,CAAZ,CAAR;AACD,GAJD,CAIE,OAAOG,KAAP,EAAc;AACdE,IAAAA,QAAQ,CAACH,UAAU,CAACC,KAAD,CAAX,CAAR;AACD;AACF,CATD;;AAWA,SAASC,UAAT","sourcesContent":["import { AnyAction, Dispatch } from 'redux';\r\n\r\nimport PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\n\r\nexport const FETCH_POSTS_LIST_REQUEST = 'FETCH_POSTS_LIST_REQUEST';\r\nexport const FETCH_POSTS_LIST_SUCCESS = 'FETCH_POSTS_LIST_SUCCESS';\r\nexport const FETCH_POSTS_LIST_FAILURE = 'FETCH_POSTS_LIST_FAILURE';\r\n\r\nconst postsRequested = (): AnyAction => ({\r\n  type: FETCH_POSTS_LIST_REQUEST,\r\n});\r\n\r\nconst postsLoaded = (postsList: PostModel[]): AnyAction => ({\r\n  type: FETCH_POSTS_LIST_SUCCESS,\r\n  payload: postsList,\r\n});\r\n\r\nconst postsError = (error: Error): AnyAction => ({\r\n  type: FETCH_POSTS_LIST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst fetchPosts = async (dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postsRequested());\r\n    const postsList = (await blogService.getPosts()).reverse();\r\n    dispatch(postsLoaded(postsList));\r\n  } catch (error) {\r\n    dispatch(postsError(error));\r\n  }\r\n};\r\n\r\nexport { fetchPosts };\r\n"]},"metadata":{},"sourceType":"module"}