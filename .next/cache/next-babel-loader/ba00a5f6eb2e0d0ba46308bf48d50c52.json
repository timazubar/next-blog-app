{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BlogService from '../../services/BlogService';\nvar actionTypes;\n\n(function (actionTypes) {\n  actionTypes[\"FETCH_POST_REQUEST\"] = \"FETCH_POST_REQUEST\";\n  actionTypes[\"FETCH_POST_SUCCESS\"] = \"FETCH_POST_SUCCESS\";\n  actionTypes[\"FETCH_POST_FAILURE\"] = \"FETCH_POST_FAILURE\";\n})(actionTypes || (actionTypes = {}));\n\nvar postRequested = function postRequested() {\n  return {\n    type: actionTypes.FETCH_POST_REQUEST\n  };\n};\n\nvar postError = function postError(error) {\n  return {\n    type: actionTypes.FETCH_POST_FAILURE,\n    payload: error\n  };\n};\n\nvar postLoaded = function postLoaded(post) {\n  return {\n    type: actionTypes.FETCH_POST_SUCCESS,\n    payload: post\n  };\n};\n\nvar fetchPostByID = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(postId, dispatch) {\n    var blogService, post;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            blogService = new BlogService();\n            _context.prev = 1;\n            dispatch(postRequested());\n            _context.next = 5;\n            return blogService.getPostById(postId);\n\n          case 5:\n            post = _context.sent;\n            dispatch(postLoaded(post));\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch(postError(_context.t0));\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 9]]);\n  }));\n\n  return function fetchPostByID(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { actionTypes, fetchPostByID };","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/redux/actions/postActions.ts"],"names":["BlogService","actionTypes","postRequested","type","FETCH_POST_REQUEST","postError","error","FETCH_POST_FAILURE","payload","postLoaded","post","FETCH_POST_SUCCESS","fetchPostByID","postId","dispatch","blogService","getPostById"],"mappings":";;AACA,OAAOA,WAAP,MAAwB,4BAAxB;IAGKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAML,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAkB;AACtCC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADoB,GAAlB;AAAA,CAAtB;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD;AAAA,SAA8B;AAC9CH,IAAAA,IAAI,EAAEF,WAAW,CAACM,kBAD4B;AAE9CC,IAAAA,OAAO,EAAEF;AAFqC,GAA9B;AAAA,CAAlB;;AAKA,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAiC;AAClDP,IAAAA,IAAI,EAAEF,WAAW,CAACU,kBADgC;AAElDH,IAAAA,OAAO,EAAEE;AAFyC,GAAjC;AAAA,CAAnB;;AAKA,IAAME,aAAa;AAAA,sEAAG,iBAAOC,MAAP,EAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,YAAAA,WADc,GACA,IAAIf,WAAJ,EADA;AAAA;AAGlBc,YAAAA,QAAQ,CAACZ,aAAa,EAAd,CAAR;AAHkB;AAAA,mBAICa,WAAW,CAACC,WAAZ,CAAwBH,MAAxB,CAJD;;AAAA;AAIZH,YAAAA,IAJY;AAKlBI,YAAAA,QAAQ,CAACL,UAAU,CAACC,IAAD,CAAX,CAAR;AALkB;AAAA;;AAAA;AAAA;AAAA;AAOlBI,YAAAA,QAAQ,CAACT,SAAS,aAAV,CAAR;;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbO,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAWA,SAASX,WAAT,EAAsBW,aAAtB","sourcesContent":["import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POST_REQUEST = 'FETCH_POST_REQUEST',\r\n  FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS',\r\n  FETCH_POST_FAILURE = 'FETCH_POST_FAILURE',\r\n}\r\n\r\nconst postRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_REQUEST,\r\n});\r\n\r\nconst postError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postLoaded = (post: PostModel): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_SUCCESS,\r\n  payload: post,\r\n});\r\n\r\nconst fetchPostByID = async (postId, dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postRequested());\r\n    const post = await blogService.getPostById(postId);\r\n    dispatch(postLoaded(post));\r\n  } catch (err) {\r\n    dispatch(postError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPostByID };\r\n"]},"metadata":{},"sourceType":"module"}