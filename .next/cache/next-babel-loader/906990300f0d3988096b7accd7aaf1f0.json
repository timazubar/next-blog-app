{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BlogService from '../../services/BlogService';\nexport var SEND_POST_REQUEST = 'SEND_POST_REQUEST';\nexport var SEND_POST_SUCCESS = 'SEND_POST_SUCCESS';\nexport var SEND_POST_FAILURE = 'SEND_POST_FAILURE';\nexport var TOGGLE_SENT_STATUS = 'TOGGLE_SENT_STATUS';\n\nvar postSendRequest = function postSendRequest() {\n  return {\n    type: SEND_POST_REQUEST\n  };\n};\n\nvar postSendSuccess = function postSendSuccess() {\n  return {\n    type: SEND_POST_SUCCESS\n  };\n};\n\nvar postSendError = function postSendError(error) {\n  return {\n    type: SEND_POST_FAILURE,\n    payload: error\n  };\n};\n\nvar toggleSentStatus = function toggleSentStatus() {\n  return {\n    type: TOGGLE_SENT_STATUS\n  };\n};\n\nvar sendPost = function sendPost(dispatch) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(post) {\n      var blogService;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              blogService = new BlogService();\n\n              try {\n                dispatch(postSendRequest());\n                blogService.sendPost(post);\n                dispatch(postSendSuccess());\n                dispatch(toggleSentStatus());\n              } catch (error) {\n                dispatch(postSendError(error));\n              }\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nexport { sendPost };","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/redux/actions/createPostActions.ts"],"names":["BlogService","SEND_POST_REQUEST","SEND_POST_SUCCESS","SEND_POST_FAILURE","TOGGLE_SENT_STATUS","postSendRequest","type","postSendSuccess","postSendError","error","payload","toggleSentStatus","sendPost","dispatch","post","blogService"],"mappings":";;AAEA,OAAOA,WAAP,MAAwB,4BAAxB;AAEA,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;;AAEP,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAkB;AACxCC,IAAAA,IAAI,EAAEL;AADkC,GAAlB;AAAA,CAAxB;;AAIA,IAAMM,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAkB;AACxCD,IAAAA,IAAI,EAAEJ;AADkC,GAAlB;AAAA,CAAxB;;AAIA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA,SAA8B;AAClDH,IAAAA,IAAI,EAAEH,iBAD4C;AAElDO,IAAAA,OAAO,EAAED;AAFyC,GAA9B;AAAA,CAAtB;;AAKA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAkB;AACzCL,IAAAA,IAAI,EAAEF;AADmC,GAAlB;AAAA,CAAzB;;AAIA,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD;AAAA;AAAA,wEAAwB,iBACvCC,IADuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAGjCC,cAAAA,WAHiC,GAGnB,IAAIf,WAAJ,EAHmB;;AAIvC,kBAAI;AACFa,gBAAAA,QAAQ,CAACR,eAAe,EAAhB,CAAR;AACAU,gBAAAA,WAAW,CAACH,QAAZ,CAAqBE,IAArB;AACAD,gBAAAA,QAAQ,CAACN,eAAe,EAAhB,CAAR;AACAM,gBAAAA,QAAQ,CAACF,gBAAgB,EAAjB,CAAR;AACD,eALD,CAKE,OAAOF,KAAP,EAAc;AACdI,gBAAAA,QAAQ,CAACL,aAAa,CAACC,KAAD,CAAd,CAAR;AACD;;AAXsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;AAcA,SAASG,QAAT","sourcesContent":["import { AnyAction, Dispatch } from 'redux';\r\nimport PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\n\r\nexport const SEND_POST_REQUEST = 'SEND_POST_REQUEST';\r\nexport const SEND_POST_SUCCESS = 'SEND_POST_SUCCESS';\r\nexport const SEND_POST_FAILURE = 'SEND_POST_FAILURE';\r\nexport const TOGGLE_SENT_STATUS = 'TOGGLE_SENT_STATUS';\r\n\r\nconst postSendRequest = (): AnyAction => ({\r\n  type: SEND_POST_REQUEST,\r\n});\r\n\r\nconst postSendSuccess = (): AnyAction => ({\r\n  type: SEND_POST_SUCCESS,\r\n});\r\n\r\nconst postSendError = (error: Error): AnyAction => ({\r\n  type: SEND_POST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst toggleSentStatus = (): AnyAction => ({\r\n  type: TOGGLE_SENT_STATUS,\r\n});\r\n\r\nconst sendPost = (dispatch: Dispatch) => async (\r\n  post: PostModel\r\n): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postSendRequest());\r\n    blogService.sendPost(post);\r\n    dispatch(postSendSuccess());\r\n    dispatch(toggleSentStatus());\r\n  } catch (error) {\r\n    dispatch(postSendError(error));\r\n  }\r\n};\r\n\r\nexport { sendPost };\r\n"]},"metadata":{},"sourceType":"module"}