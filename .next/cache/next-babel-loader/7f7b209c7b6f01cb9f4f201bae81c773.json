{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport BlogService from '../../services/BlogService';\nvar actionTypes;\n\n(function (actionTypes) {\n  actionTypes[\"SEND_POST_REQUEST\"] = \"SEND_POST_REQUEST\";\n  actionTypes[\"SEND_POST_SUCCESS\"] = \"SEND_POST_SUCCESS\";\n  actionTypes[\"SEND_POST_FAILURE\"] = \"SEND_POST_FAILURE\";\n  actionTypes[\"TOGGLE_SENT_STATUS\"] = \"TOGGLE_SENT_STATUS\";\n})(actionTypes || (actionTypes = {}));\n\nvar postSendRequested = function postSendRequested() {\n  return {\n    type: actionTypes.SEND_POST_REQUEST\n  };\n};\n\nvar postSendError = function postSendError(error) {\n  return {\n    type: actionTypes.SEND_POST_FAILURE,\n    payload: error\n  };\n};\n\nvar postSendSuccess = function postSendSuccess() {\n  return {\n    type: actionTypes.SEND_POST_SUCCESS\n  };\n};\n\nvar toggleSentStatus = function toggleSentStatus() {\n  return {\n    type: actionTypes.TOGGLE_SENT_STATUS\n  };\n};\n\nvar sendPost = function sendPost(dispatch) {\n  return function _callee(post) {\n    var blogService;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            blogService = new BlogService();\n\n            try {\n              dispatch(postSendRequested());\n              blogService.sendPost(post);\n              dispatch(postSendSuccess());\n              dispatch(toggleSentStatus());\n              setTimeout(function () {\n                dispatch(toggleSentStatus());\n              }, 800);\n            } catch (err) {\n              dispatch(postSendError(err));\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexport { actionTypes, sendPost };","map":{"version":3,"sources":["E:/TIMA/Projects/DevelopsToday/next-blog-app/redux/actions/createPostActions.ts"],"names":["BlogService","actionTypes","postSendRequested","type","SEND_POST_REQUEST","postSendError","error","SEND_POST_FAILURE","payload","postSendSuccess","SEND_POST_SUCCESS","toggleSentStatus","TOGGLE_SENT_STATUS","sendPost","dispatch","post","blogService","setTimeout","err"],"mappings":";AACA,OAAOA,WAAP,MAAwB,4BAAxB;IAGKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAQL,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAkB;AAC1CC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADwB,GAAlB;AAAA,CAA1B;;AAIA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA,SAA8B;AAClDH,IAAAA,IAAI,EAAEF,WAAW,CAACM,iBADgC;AAElDC,IAAAA,OAAO,EAAEF;AAFyC,GAA9B;AAAA,CAAtB;;AAKA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAkB;AACxCN,IAAAA,IAAI,EAAEF,WAAW,CAACS;AADsB,GAAlB;AAAA,CAAxB;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAkB;AACzCR,IAAAA,IAAI,EAAEF,WAAW,CAACW;AADuB,GAAlB;AAAA,CAAzB;;AAIA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD;AAAA,SAAwB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCC,YAAAA,WADiC,GACnB,IAAIhB,WAAJ,EADmB;;AAEvC,gBAAI;AACFc,cAAAA,QAAQ,CAACZ,iBAAiB,EAAlB,CAAR;AACAc,cAAAA,WAAW,CAACH,QAAZ,CAAqBE,IAArB;AACAD,cAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACAK,cAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR;AACAM,cAAAA,UAAU,CAAC,YAAM;AACfH,gBAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR;AACD,eAFS,EAEP,GAFO,CAAV;AAGD,aARD,CAQE,OAAOO,GAAP,EAAY;AACZJ,cAAAA,QAAQ,CAACT,aAAa,CAACa,GAAD,CAAd,CAAR;AACD;;AAZsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;AAAA,CAAjB;;AAeA,SAASjB,WAAT,EAAsBY,QAAtB","sourcesContent":["import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  SEND_POST_REQUEST = 'SEND_POST_REQUEST',\r\n  SEND_POST_SUCCESS = 'SEND_POST_SUCCESS',\r\n  SEND_POST_FAILURE = 'SEND_POST_FAILURE',\r\n\r\n  TOGGLE_SENT_STATUS = 'TOGGLE_SENT_STATUS',\r\n}\r\n\r\nconst postSendRequested = (): AnyAction => ({\r\n  type: actionTypes.SEND_POST_REQUEST,\r\n});\r\n\r\nconst postSendError = (error: Error): AnyAction => ({\r\n  type: actionTypes.SEND_POST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postSendSuccess = (): AnyAction => ({\r\n  type: actionTypes.SEND_POST_SUCCESS,\r\n});\r\n\r\nconst toggleSentStatus = (): AnyAction => ({\r\n  type: actionTypes.TOGGLE_SENT_STATUS,\r\n});\r\n\r\nconst sendPost = (dispatch: Dispatch) => async (post: PostModel): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postSendRequested());\r\n    blogService.sendPost(post);\r\n    dispatch(postSendSuccess());\r\n    dispatch(toggleSentStatus());\r\n    setTimeout(() => {\r\n      dispatch(toggleSentStatus());\r\n    }, 800);\r\n  } catch (err) {\r\n    dispatch(postSendError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, sendPost };\r\n"]},"metadata":{},"sourceType":"module"}