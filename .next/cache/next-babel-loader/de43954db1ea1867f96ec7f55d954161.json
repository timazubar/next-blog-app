{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport BlogService from '../../services/BlogService';\nvar actionTypes;\n\n(function (actionTypes) {\n  actionTypes[\"FETCH_POSTS_LIST_REQUEST\"] = \"FETCH_AUTHORS_LIST_REQUEST\";\n  actionTypes[\"FETCH_POSTS_LIST_SUCCESS\"] = \"FETCH_AUTHORS_LIST_SUCCESS\";\n  actionTypes[\"FETCH_POSTS_LIST_FAILURE\"] = \"FETCH_AUTHORS_LIST_FAILURE\";\n})(actionTypes || (actionTypes = {}));\n\nvar postsRequested = function postsRequested() {\n  return {\n    type: actionTypes.FETCH_POSTS_LIST_REQUEST\n  };\n};\n\nvar postsError = function postsError(error) {\n  return {\n    type: actionTypes.FETCH_POSTS_LIST_FAILURE,\n    payload: error\n  };\n};\n\nvar postsLoaded = function postsLoaded(postsList) {\n  return {\n    type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\n    payload: postsList\n  };\n};\n\nvar fetchPosts = function fetchPosts(dispatch) {\n  var blogService, postsList;\n  return _regeneratorRuntime.async(function fetchPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          blogService = new BlogService();\n          _context.prev = 1;\n          dispatch(postsRequested());\n          _context.t0 = _regeneratorRuntime;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(blogService.getAllPosts());\n\n        case 6:\n          _context.t1 = _context.sent.reverse();\n          _context.next = 9;\n          return _context.t0.awrap.call(_context.t0, _context.t1);\n\n        case 9:\n          postsList = _context.sent;\n          dispatch(postsLoaded(postsList));\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t2 = _context[\"catch\"](1);\n          dispatch(postsError(_context.t2));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 13]], Promise);\n};\n\nexport { actionTypes, fetchPosts };","map":{"version":3,"sources":["C:/Users/Tima/Desktop/wl-blog/next-simple-blog/redux/actions/postsListActions.ts"],"names":["BlogService","actionTypes","postsRequested","type","FETCH_POSTS_LIST_REQUEST","postsError","error","FETCH_POSTS_LIST_FAILURE","payload","postsLoaded","postsList","FETCH_POSTS_LIST_SUCCESS","fetchPosts","dispatch","blogService","getAllPosts","reverse"],"mappings":";AACA,OAAOA,WAAP,MAAwB,4BAAxB;IAGKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAML,IAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAkB;AACvCC,IAAAA,IAAI,EAAEF,WAAW,CAACG;AADqB,GAAlB;AAAA,CAAvB;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,KAAD;AAAA,SAA8B;AAC/CH,IAAAA,IAAI,EAAEF,WAAW,CAACM,wBAD6B;AAE/CC,IAAAA,OAAO,EAAEF;AAFsC,GAA9B;AAAA,CAAnB;;AAKA,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACC,SAAD;AAAA,SAAwC;AAC1DP,IAAAA,IAAI,EAAEF,WAAW,CAACU,wBADwC;AAE1DH,IAAAA,OAAO,EAAEE;AAFiD,GAAxC;AAAA,CAApB;;AAKA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,UAAAA,WADW,GACG,IAAId,WAAJ,EADH;AAAA;AAGfa,UAAAA,QAAQ,CAACX,cAAc,EAAf,CAAR;AAHe;AAAA;AAAA,2CAIgBY,WAAW,CAACC,WAAZ,EAJhB;;AAAA;AAAA,sCAI2CC,OAJ3C;AAAA;AAAA;;AAAA;AAITN,UAAAA,SAJS;AAKfG,UAAAA,QAAQ,CAACJ,WAAW,CAACC,SAAD,CAAZ,CAAR;AALe;AAAA;;AAAA;AAAA;AAAA;AAOfG,UAAAA,QAAQ,CAACR,UAAU,aAAX,CAAR;;AAPe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAWA,SAASJ,WAAT,EAAsBW,UAAtB","sourcesContent":["import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POSTS_LIST_REQUEST = 'FETCH_AUTHORS_LIST_REQUEST',\r\n  FETCH_POSTS_LIST_SUCCESS = 'FETCH_AUTHORS_LIST_SUCCESS',\r\n  FETCH_POSTS_LIST_FAILURE = 'FETCH_AUTHORS_LIST_FAILURE',\r\n}\r\n\r\nconst postsRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_REQUEST,\r\n});\r\n\r\nconst postsError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postsLoaded = (postsList: PostModel[]): AnyAction => ({\r\n  type: actionTypes.FETCH_POSTS_LIST_SUCCESS,\r\n  payload: postsList,\r\n});\r\n\r\nconst fetchPosts = async (dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postsRequested());\r\n    const postsList = await (await blogService.getAllPosts()).reverse();\r\n    dispatch(postsLoaded(postsList));\r\n  } catch (err) {\r\n    dispatch(postsError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPosts };\r\n"]},"metadata":{},"sourceType":"module"}