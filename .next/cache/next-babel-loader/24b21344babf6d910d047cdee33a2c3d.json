{"ast":null,"code":"import BlogService from '../../services/BlogService';\nvar actionTypes;\n\n(function (actionTypes) {\n  actionTypes[\"FETCH_POST_REQUEST\"] = \"FETCH_POST_REQUEST\";\n  actionTypes[\"FETCH_POST_SUCCESS\"] = \"FETCH_POST_SUCCESS\";\n  actionTypes[\"FETCH_POST_FAILURE\"] = \"FETCH_POST_FAILURE\";\n})(actionTypes || (actionTypes = {}));\n\nconst postRequested = () => ({\n  type: actionTypes.FETCH_POST_REQUEST\n});\n\nconst postError = error => ({\n  type: actionTypes.FETCH_POST_FAILURE,\n  payload: error\n});\n\nconst postLoaded = post => ({\n  type: actionTypes.FETCH_POST_SUCCESS,\n  payload: post\n});\n\nconst fetchPostByID = async (postId, dispatch) => {\n  const blogService = new BlogService();\n\n  try {\n    dispatch(postRequested());\n    const post = await blogService.getPostById(postId);\n    dispatch(postLoaded(post));\n  } catch (err) {\n    dispatch(postError(err));\n  }\n};\n\nexport { actionTypes, fetchPostByID };","map":{"version":3,"sources":["C:/Users/Tima/Desktop/wl-blog/next-simple-blog/redux/actions/postActions.ts"],"names":["BlogService","actionTypes","postRequested","type","FETCH_POST_REQUEST","postError","error","FETCH_POST_FAILURE","payload","postLoaded","post","FETCH_POST_SUCCESS","fetchPostByID","postId","dispatch","blogService","getPostById","err"],"mappings":"AACA,OAAOA,WAAP,MAAwB,4BAAxB;IAGKC,W;;WAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAML,MAAMC,aAAa,GAAG,OAAkB;AACtCC,EAAAA,IAAI,EAAEF,WAAW,CAACG;AADoB,CAAlB,CAAtB;;AAIA,MAAMC,SAAS,GAAIC,KAAD,KAA8B;AAC9CH,EAAAA,IAAI,EAAEF,WAAW,CAACM,kBAD4B;AAE9CC,EAAAA,OAAO,EAAEF;AAFqC,CAA9B,CAAlB;;AAKA,MAAMG,UAAU,GAAIC,IAAD,KAAiC;AAClDP,EAAAA,IAAI,EAAEF,WAAW,CAACU,kBADgC;AAElDH,EAAAA,OAAO,EAAEE;AAFyC,CAAjC,CAAnB;;AAKA,MAAME,aAAa,GAAG,OAAOC,MAAP,EAAeC,QAAf,KAAqD;AACzE,QAAMC,WAAW,GAAG,IAAIf,WAAJ,EAApB;;AACA,MAAI;AACFc,IAAAA,QAAQ,CAACZ,aAAa,EAAd,CAAR;AACA,UAAMQ,IAAI,GAAG,MAAMK,WAAW,CAACC,WAAZ,CAAwBH,MAAxB,CAAnB;AACAC,IAAAA,QAAQ,CAACL,UAAU,CAACC,IAAD,CAAX,CAAR;AACD,GAJD,CAIE,OAAOO,GAAP,EAAY;AACZH,IAAAA,QAAQ,CAACT,SAAS,CAACY,GAAD,CAAV,CAAR;AACD;AACF,CATD;;AAWA,SAAShB,WAAT,EAAsBW,aAAtB","sourcesContent":["import PostModel from '../../models/PostModel';\r\nimport BlogService from '../../services/BlogService';\r\nimport { Dispatch, AnyAction } from 'redux';\r\n\r\nenum actionTypes {\r\n  FETCH_POST_REQUEST = 'FETCH_POST_REQUEST',\r\n  FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS',\r\n  FETCH_POST_FAILURE = 'FETCH_POST_FAILURE',\r\n}\r\n\r\nconst postRequested = (): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_REQUEST,\r\n});\r\n\r\nconst postError = (error: Error): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nconst postLoaded = (post: PostModel): AnyAction => ({\r\n  type: actionTypes.FETCH_POST_SUCCESS,\r\n  payload: post,\r\n});\r\n\r\nconst fetchPostByID = async (postId, dispatch: Dispatch): Promise<void> => {\r\n  const blogService = new BlogService();\r\n  try {\r\n    dispatch(postRequested());\r\n    const post = await blogService.getPostById(postId);\r\n    dispatch(postLoaded(post));\r\n  } catch (err) {\r\n    dispatch(postError(err));\r\n  }\r\n};\r\n\r\nexport { actionTypes, fetchPostByID };\r\n"]},"metadata":{},"sourceType":"module"}